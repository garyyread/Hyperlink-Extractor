/*
 * HyperLinkExtractor.java
 * Gary Read 662193
 * Swansea University
 */

import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.text.SimpleDateFormat;

public class HyperLinkExtractor {

	private static ArrayList<String> HyperLinks;
	private static PrintWriter oLog;

	//Main method, Initilizes varibles from console
	public static void main(String[] args) {
	
		String url = null;
		boolean partial = false;
		
		intPrintWriter();
		
		//Checks for correct command line arguments
		if (args.length < 1) {
			usage();
			return;
		} else {
			if (args[0].equalsIgnoreCase("-cp")) {
				url = args[1];
				partial = true;
				
				getHyperLinks(url, partial);
			}
			else if (args[0].charAt(0) != '-') {
				url = args[0];
				partial = false;
				
				getHyperLinks(url, partial);
			} else {
				usage();
				return;
			}
		}
	}
	
	private static void getHyperLinks(String url, boolean partial) {
		//Create new HyperLink ArrayList<String>
		HyperLinks = new ArrayList<String>();
		
		//Create Initial Node
		Node newNode = new Node(url, partial);
		
		System.out.println("BRANCHING:\t" + newNode.getNodeURL());
		HyperLinks.add(newNode.getNodeURL());
		
		for (String link : newNode.getNodeLeaves()) {
			Node node = new Node(link, partial);
			
			System.out.println();
			String tab = "\t\t\t\t";
		
			if (node.getNodeLeaves() != null) {
				System.out.println("\tBRANCHING:\t" + node.getNodeURL());
				HyperLinks.add(node.getNodeURL());
				
				for (String address : node.getNodeLeaves()) {
					System.out.println(tab + address);
					HyperLinks.add(address);
				}
			} else {
				System.out.println("Malformed URL.");
			}
		}
		
		writeToFile();
	}
	
	//Method to write HyperLinks<String> to file called 'HyperLinks.txt'
	private static void writeToFile() {
		PrintWriter out = null;
		String fileName = "HyperLinks.txt";
		
		try {
			out = new PrintWriter(fileName);
			
			//Get and Format current time and date
			Date d = new Date();
			String time = new SimpleDateFormat("HH:mm:ss").format(d);
			String date = new SimpleDateFormat("dd/MM/yyyy").format(d);
			
			out.println("#=====================================================================");
			out.println("#Generated by HyperLinkExtractor");
			out.println("#");
			out.println("#Created " + date + " @ " + time);
			out.println("#=====================================================================");
			out.println("#");
			
			for (String link : HyperLinks) {
				out.println(link);
			}
		}
		catch (IOException e) {
			System.out.println("Writing Failed");
		}
		finally {
			if (out != null) { 
				out.close();
			}
		}
		
		System.out.println();
		System.out.println("Completed Writing - " + fileName);
	}
	
	//Initalize PrintWriter for logging
	private static void intPrintWriter() {
		oLog = null;
		
		//Creating PrintWriter for logging
		try {
			//Over-write any previous logs
			oLog = new PrintWriter("log.txt");
			oLog.print("");
			
			//Create FileWriter captured in a PrintWriter for append and automatic flushing
			oLog = new PrintWriter(new FileWriter("log.txt", true), true);
			
			//Get and Format current time and date
			Date d = new Date();
			String time = new SimpleDateFormat("HH:mm:ss").format(d);
			String date = new SimpleDateFormat("dd/MM/yyyy").format(d);
			
			oLog.println("=====================================================================");
			oLog.println("Generated by HyperLinkExtractor");
			oLog.println();
			oLog.println("Created " + date + " @ " + time);
			oLog.println("=====================================================================");
		}
		catch (IOException e) {
			System.out.println();
			System.out.println("IO Exception");
			System.out.println("\t" + "Logs will not be captured.");
			System.out.println();
		}
	}
	
	//Console Usage Message
	public static void usage() {
		System.out.println();
		System.out.println("HyperLinkExtractor");
		System.out.println("\tUSAGE\t"+ "java HyperLinkExtractor [-OPTION] [URL_PATH]");
		System.out.println("");
		System.out.println("\tOPTIONS");
		System.out.println("\t\t"+ "-cp" + "\tCapture Partial URLs");
		System.out.println("\t\t"+ "" + "\tLeave blank to Omit Partial URLs");
		System.out.println();
		System.out.println("\tURL_PATH\t" + "http://example.com ");
		System.out.println();
	}
}